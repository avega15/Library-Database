package com.example.demo;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class DemoApplication{
	  @Bean
	  public PoolingHttpClientConnectionManager poolingHttpClientConnectionManager() {
	    PoolingHttpClientConnectionManager result = new PoolingHttpClientConnectionManager();
	    result.setMaxTotal(20);
	    return result;
	  }

	  @Bean
	  public RequestConfig requestConfig() {
	    RequestConfig result = RequestConfig.custom()
	      .setConnectionRequestTimeout(2000)
	      .setConnectTimeout(2000)
	      .setSocketTimeout(2000)
	      .build();
	    return result;
	  }

	  @Bean
	  public CloseableHttpClient httpClient(PoolingHttpClientConnectionManager poolingHttpClientConnectionManager, RequestConfig requestConfig) {
	    CloseableHttpClient result = HttpClientBuilder
	      .create()
	      .setConnectionManager(poolingHttpClientConnectionManager)
	      .setDefaultRequestConfig(requestConfig)
	      .build();
	    return result;
	  }

	  @Bean
	  public RestTemplate restTemplate(HttpClient httpClient) {
	    HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
	    requestFactory.setHttpClient(httpClient);
	    return new RestTemplate(requestFactory);
	  }
	
	
	@Bean
	public RestTemplate getRestTemplate() {
		return new RestTemplate();
	}
	
	
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}
}
